"use strict";(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[4531],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3360:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(7462),o=(n(7294),n(3905));const i={title:"Ignore mutations",sidebar_position:35,custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/ignore-mutations.md"},a="Ignore mutations",s={unversionedId:"stryker-net/ignore-mutations",id:"stryker-net/ignore-mutations",title:"Ignore mutations",description:"There are several ways of ignoring mutations in Stryker.NET. By using these options together you have fine grained control over which mutation should be tested and which should be ignored.",source:"@site/docs/stryker-net/ignore-mutations.md",sourceDirName:"stryker-net",slug:"/stryker-net/ignore-mutations",permalink:"/docs/stryker-net/ignore-mutations",editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/ignore-mutations.md",tags:[],version:"current",sidebarPosition:35,frontMatter:{title:"Ignore mutations",sidebar_position:35,custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/ignore-mutations.md"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/stryker-net/configuration"},next:{title:"Mutations",permalink:"/docs/stryker-net/mutations"}},l={},u=[{value:"Ignore mutations option",id:"ignore-mutations-option",level:2},{value:"Ignore methods option",id:"ignore-methods-option",level:2},{value:"Mutate option",id:"mutate-option",level:2},{value:"Stryker comments",id:"stryker-comments",level:2}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ignore-mutations"},"Ignore mutations"),(0,o.kt)("p",null,"There are several ways of ignoring mutations in Stryker.NET. By using these options together you have fine grained control over which mutation should be tested and which should be ignored."),(0,o.kt)("h2",{id:"ignore-mutations-option"},"Ignore mutations option"),(0,o.kt)("p",null,"Every occurrence of a specific mutation type can be ignored using the ",(0,o.kt)("a",{parentName:"p",href:"https://stryker-mutator.io/docs/stryker-net/configuration#ignore-mutations-string"},"ignore mutations")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"stryker-config": {\n    "ignore-mutations": [\n        "string"\n    ]\n}\n')),(0,o.kt)("h2",{id:"ignore-methods-option"},"Ignore methods option"),(0,o.kt)("p",null,"Specific method calls can be ignored using the ",(0,o.kt)("a",{parentName:"p",href:"https://stryker-mutator.io/docs/stryker-net/configuration#ignore-methods-string"},"ignore methods")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"stryker-config": {\n    "ignore-methods": [\n        "*Log", // Ignores all methods ending with Log\n        "Console.Write*", // Ignores all methods starting with Write in the class Console\n        "*Exception.ctor" // Ignores all exception constructors\n    ]\n}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note that this only ignores mutation inside the method calls, not the method declaration.")),(0,o.kt)("h2",{id:"mutate-option"},"Mutate option"),(0,o.kt)("p",null,"Whole files can be ignored using the ",(0,o.kt)("a",{parentName:"p",href:"https://stryker-mutator.io/docs/stryker-net/configuration#mutate-glob"},"mutate")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"stryker-config": {\n    "mutate": ["!**/*.Generated.cs"]\n}\n')),(0,o.kt)("p",null,"Or on command line: ",(0,o.kt)("inlineCode",{parentName:"p"},'-m "!**/*.Generated.cs"')),(0,o.kt)("h2",{id:"stryker-comments"},"Stryker comments"),(0,o.kt)("p",null,"It's also possible to filter mutants at the source code level using special comments. This filtering gives the most fine-grained level of control."),(0,o.kt)("p",null,"The syntax for the comments is: ",(0,o.kt)("inlineCode",{parentName:"p"},"Stryker [disable|restore][once][all| mutator list][: reason for disabling]")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"// Stryker disable all")," Disables all mutants from that line on."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"// Stryker restore all")," re-enables all mutants from that line on."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"// Stryker disable once all")," will only disable mutants on the next line."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"// Stryker disable once Arithmetic,Update")," will only disable Arithmetic and Update mutants on the next line"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"var i = 0;\nvar y = 10;\n// Stryker disable all : for explanatory reasons\ni++; // won't be mutated\ny++; // won't be mutated\n// Stryker restore all\ni--; // will be mutated\n// Stryker disable once all\ny--; // won't be mutated\ni++; // will be mutated\n// Stryker disable once Arithmetic\ny++; // will be mutated\n// Stryker disable once Arithmetic,Update\ni--; // won't be mutated\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note that this feature is scope aware. If you disable mutators inside a method, the scope will not leak outside the method, even if there is more code below.")))}m.isMDXComponent=!0}}]);