"use strict";(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[1335],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,b=c["".concat(s,".").concat(d)]||c[d]||p[d]||l;return n?a.createElement(b,i(i({ref:t},m),{},{components:n})):a.createElement(b,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9601:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return u}});var a=n(7462),r=(n(7294),n(3905));const l={title:"Disable mutants",custom_edit_url:"https://github.com/stryker-mutator/stryker-js/edit/master/docs/disable-mutants.md"},i=void 0,o={unversionedId:"stryker-js/disable-mutants",id:"stryker-js/disable-mutants",title:"Disable mutants",description:"During mutation testing, you might run into equivalent mutants or simply mutants that you are not interested in.",source:"@site/docs/stryker-js/disable-mutants.md",sourceDirName:"stryker-js",slug:"/stryker-js/disable-mutants",permalink:"/docs/stryker-js/disable-mutants",editUrl:"https://github.com/stryker-mutator/stryker-js/edit/master/docs/disable-mutants.md",tags:[],version:"current",frontMatter:{title:"Disable mutants",custom_edit_url:"https://github.com/stryker-mutator/stryker-js/edit/master/docs/disable-mutants.md"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/stryker-js/configuration"},next:{title:"Plugins",permalink:"/docs/stryker-js/plugins"}},s={},u=[{value:"An example",id:"an-example",level:2},{value:"Disable mutants",id:"disable-mutants",level:2},{value:"Exclude the mutator",id:"exclude-the-mutator",level:2},{value:"Using a <code>// Stryker disable</code> comment.",id:"using-a--stryker-disable-comment",level:2},{value:"Disable comment syntax",id:"disable-comment-syntax",level:2}],m={toc:u};function p(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"During mutation testing, you might run into ",(0,r.kt)("a",{parentName:"p",href:"/docs/mutation-testing-elements/equivalent-mutants"},"equivalent mutants")," or simply mutants that you are not interested in."),(0,r.kt)("h2",{id:"an-example"},"An example"),(0,r.kt)("p",null,"Given this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function max(a, b) {\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"And these tests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"describe('math', () => {\n  it('should return 4 for max(4, 3)', () => {\n    expect(max(4, 3)).eq(4);\n  });\n  it('should return 4 for max(3, 4)', () => {\n    expect(max(3, 4)).eq(4);\n  });\n});\n")),(0,r.kt)("p",null,"Stryker will generate (amongst others) these mutants:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"function max(a, b) {\n-  return a < b ? b : a;\n+  return true ? b : a; // \ud83d\udc7d 1\n+  return false ? b : a; // \ud83d\udc7d 2\n+  return a <= b ? b : a; // \ud83d\udc7d 3\n}\n")),(0,r.kt)("p",null,"Mutant 1 and 2 are killed by the tests. However, mutant 3 isn't killed. In fact, mutant 3 ",(0,r.kt)("em",{parentName:"p"},"cannot be killed")," because the mutated code is equivalent to the original. It is therefore called ",(0,r.kt)("em",{parentName:"p"},"equivalent mutant"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"equivalent mutant",src:n(9554).Z,width:"996",height:"376"})),(0,r.kt)("h2",{id:"disable-mutants"},"Disable mutants"),(0,r.kt)("p",null,"StrykerJS supports 2 ways to disable mutants."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#exclude-the-mutator"},"Exclude the mutator"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#using-a--stryker-disable-comment"},"Using a ",(0,r.kt)("inlineCode",{parentName:"a"},"// Stryker disable")," comment"),".")),(0,r.kt)("p",null,"Disabled mutants will still end up in your report, but will get the ",(0,r.kt)("inlineCode",{parentName:"p"},"ignored")," status. This means that they don't influence your mutation score, but are still visible if you want to look for them. This has no impact on the performance of mutation testing."),(0,r.kt)("h2",{id:"exclude-the-mutator"},"Exclude the mutator"),(0,r.kt)("p",null,"You can simply disable the mutator entirely. This is done by stating the mutator name in the ",(0,r.kt)("inlineCode",{parentName:"p"},"mutator.excludedMutations")," array in your stryker configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "mutator": {\n        "excludedMutations": ["EqualityOperator"]\n  }\n}\n')),(0,r.kt)("p",null,"The mutator name can be found in the clear-text or html report. "),(0,r.kt)("p",null,"If you've enabled the clear-text reporter (enabled by default), you can find the mutator name in your console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#3. [Survived] EqualityOperator\nsrc/math.js:3:12\n-       return a < b ? b : a;\n+       return a <= b ? b : a;\nTests ran:\n    math should return 4 for max(4, 3)\n    math should return 4 for max(3, 4)\n")),(0,r.kt)("p",null,"In the html report, you will need to select the mutant you want to ignore, the drawer at the bottom has the mutator name in its title."),(0,r.kt)("p",null,"However, disable the mutator for all your files is kind of a shotgun approach. Sure it works, but the mutator is now also disabled for other files and places. You probably want to use a comment instead."),(0,r.kt)("h2",{id:"using-a--stryker-disable-comment"},"Using a ",(0,r.kt)("inlineCode",{parentName:"h2"},"// Stryker disable")," comment."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Available since Stryker 5.4")),(0,r.kt)("p",null,"You can disable Stryker for a specific line of code using a comment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function max(a, b) {\n    // Stryker disable next-line all\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"After running Stryker again, the report looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"disable all",src:n(1394).Z,width:"979",height:"400"})),(0,r.kt)("p",null,"This works, but is not exactly what we want. As you can see, all mutants on line 4 are now disabled. "),(0,r.kt)("p",null,"We can do better by specifying which mutator we want to ignore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function max(a, b) {\n    // Stryker disable next-line EqualityOperator\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"We can even provide a custom reason for disabling this mutator behind a colon (",(0,r.kt)("inlineCode",{parentName:"p"},":"),"). This reason will also end up in your report (drawer below)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function max(a, b) {\n    // Stryker disable next-line EqualityOperator: The <= mutant results in an equivalent mutant\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"After running Stryker again, the report looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"disable equality operator",src:n(859).Z,width:"979",height:"400"})),(0,r.kt)("h2",{id:"disable-comment-syntax"},"Disable comment syntax"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Available since Stryker 5.4")),(0,r.kt)("p",null,"The disabled comment is pretty powerful. Some more examples:"),(0,r.kt)("p",null,"Disable an entire file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Stryker disable all\nfunction max(a, b) {\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"Disable parts of a file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Stryker disable all\nfunction max(a, b) {\n    return a < b ? b : a;\n}\n// Stryker restore all\nfunction min(a, b) {\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"Disable 2 mutators for an entire file with a custom reason:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Stryker disable EqualityOperator,ObjectLiteral: We'll implement tests for these next sprint\nfunction max(a, b) {\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"Disable all mutators for an entire file, but restore the EqualityOperator for 1 line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Stryker disable all\nfunction max(a, b) {\n  // Stryker restore next-line EqualityOperator\n  return a < b ? b : a;\n}\n")),(0,r.kt)("p",null,"The syntax looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Stryker [disable|restore] [next-line] *mutatorList*[: custom reason]\n")),(0,r.kt)("p",null,"The comment always starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"// Stryker"),", followed by either ",(0,r.kt)("inlineCode",{parentName:"p"},"disable")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"restore"),". Next, you can specify whether or not this comment targets the ",(0,r.kt)("inlineCode",{parentName:"p"},"next-line"),", or all lines from this point on (by not specifying ",(0,r.kt)("inlineCode",{parentName:"p"},"next-line"),"). As for the mutator list, this is either a comma separated list of mutators, or ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," to signal this comment targets all mutators. Last is an optional custom reason text, which follows the ",(0,r.kt)("inlineCode",{parentName:"p"},":")," colon."))}p.isMDXComponent=!0},1394:function(e,t,n){t.Z=n.p+"assets/images/disable-mutants-disable-all-b8259864d0ebbd192cbba2106fd2aa4a.png"},859:function(e,t,n){t.Z=n.p+"assets/images/disable-mutants-disable-equality-operator-8b9df99cea92009512767003a0db70ee.png"},9554:function(e,t,n){t.Z=n.p+"assets/images/disable-mutants-equivalent-mutant-e48c67a6febafc28a5a12a74430cbda2.png"}}]);